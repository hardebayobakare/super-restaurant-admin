// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Restaurant {
  id  String  @id @default(uuid())
  name  String
  userId  String
  billboards Billboard[] @relation("RestaurantToBillboard")
  category Category[] @relation("RestaurantToCategory")
  size Size[] @relation("RestaurantToSize")
  product Product[] @relation("RestaurantToProduct")
  order Order[] @relation("RestaurantToOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id String @id @default(uuid())
  restaurantId String
  restaurant Restaurant @relation("RestaurantToBillboard", fields: [restaurantId], references: [id])
  categories Category[]
  label String
  imageUrl String
  isMainMenu Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([restaurantId])
}

model Category {
  id String @id @default(uuid())
  restaurantId String
  restaurant Restaurant @relation("RestaurantToCategory", fields: [restaurantId], references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId], references: [id])
  product Product[] @relation("CategoryToProduct")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([restaurantId])
  @@index([billboardId])
}

model Size {
  id String @id @default(uuid())
  restaurantId String
  restaurant Restaurant @relation("RestaurantToSize", fields: [restaurantId], references: [id])
  sizePrice SizePrice[]
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([restaurantId])
}

model Product {
  id String @id @default(uuid())
  restaurantId String
  restaurant Restaurant @relation("RestaurantToProduct", fields: [restaurantId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name String
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  images Image[]
  orderItems OrderItem[]
  sizePrices SizePrice[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([restaurantId])
  @@index([categoryId])
}

model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model SizePrice {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sizeId String
  size Size @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  quantity Int @default(1)
  price Decimal

  @@index([productId])
  @@index([sizeId])
}

model Order {
  id String @id @default(uuid())
  restaurantId String
  restaurant Restaurant @relation("RestaurantToOrder", fields: [restaurantId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  name String @default("")
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([restaurantId])
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([orderId])
}